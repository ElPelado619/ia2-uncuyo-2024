# -*- coding: utf-8 -*-
"""TitanicNotebook.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1L2O1LzossJUzO8QdOLPkURDRztl_xfle
"""

import numpy
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import matplotlib.pyplot as plt
import seaborn as sns

"""# Titanic - Machine Learning from Disaster

En este notebook, se estudian dos datasets que incluyen información de distintos pasajeros del Titanic, como el nombre, edad, género y clase socioeconómica de cada uno de ellos.

`Train.csv` contiene los detalles de un subconjunto de los pasajeros a bordo (891 para ser exactos) y, a su vez, revela si han sobrevivido o no.

`Test.csv` contiene información similar, pero no se detalla si cada pasajero ha sobrevivido o no. Por ende, el objetivo en este notebook es predecir si los otros 418 pasajeros a bordo han sobrevivido.

## 1. Conociendo el dataset
"""

import pandas as pd
train_data = pd.read_csv('train.csv')
train_data.head()

"""El dataset de entrenamiento incluye los siguientes datos:

*   `PassengerId`: Identificador único por cada pasajero.
*   `Survived`:
 *  1: Sobrevivió.
 *  0: No sobrevivió.
*   `Pclass`: Clase de ticket (1=1ra, 2=2da, ...).
*   `Sex`: Sexo del pasajero.
*   `Age`: Edad en años.
*   `Sibsp`: Número de hermanos/cónuyges a bordo.
*   `Parch`: Número de padres/niños a bordo.
*   `Ticket`: Número de ticket.
*   `Fare`: Tarifa del pasajero.
*   `Cabin`: Número de cabina.
*   `Embarked`: Puerto de embarcación (C = Cherbourg, Q = Queenstown, S = Southampton).

Por otro lado, los datos de test se ven como siguen:
"""

test_data = pd.read_csv('test.csv')
test_data.head()

print("[train_data]\tCantidad de filas: \t", train_data.shape[0])
print("[train_data]\tCantidad de columnas: \t", train_data.shape[1])
print("-"*80)
print("[test_data]\tCantidad de filas: \t", test_data.shape[0])
print("[test_data]\tCantidad de columnas: \t", test_data.shape[1])

"""## 2. Visualizando datos

### ¿Cuántos valores nulos hay en los datos?
"""

print("[train_data] Valores nulos por columna:")
print(train_data.isnull().sum())
print("-"*40)
print("[test_data] Valores nulos por columna:")
print(test_data.isnull().sum())

"""### ¿Cuántos pasajeros sobrevivieron?"""

print(train_data['Survived'].value_counts())
print("-"*40)
print(train_data['Survived'].value_counts(normalize=True).sort_index())
print("-"*40)
print(train_data.groupby('Pclass')['Survived'].value_counts(normalize=True).sort_index())
print("-"*40)
print(train_data.groupby('Sex')['Survived'].value_counts(normalize=True).sort_index())
print("-"*40)
print(train_data.groupby('Embarked')['Survived'].value_counts(normalize=True).sort_index())
print("-"*40)
print(train_data.groupby('SibSp')['Survived'].value_counts(normalize=True).sort_index())

"""### Correlación entre los atributos de entrenamiento"""

train_data = train_data.drop(['PassengerId','Name', 'Ticket', 'Cabin'], axis=1)

train_data['Sex'] = train_data['Sex'].map({'male': 0, 'female': 1})
train_data['Embarked'] = train_data['Embarked'].map({'C': 2, 'Q': 1, 'S': 0})

print(train_data.head())

plt.figure(figsize=(10,8))
sns.heatmap(train_data.corr(), annot=True, cmap='coolwarm')
plt.title('Mapa de calor de correlaciones')
plt.show()

"""## 3.  Feature Engineering

La siguiente idea es manipular valores nulos.

Para los datos de entrenamiento, tenemos los siguientes valores nulos:
* Age:            177
* Embarked:         2

Para los datos de test, tenemos los siguientes valores nulos:
* Age:             86
* Fare:             1

Como no existe una relación fuerte entre la edad y otro atributo, una idea sería ver cómo se distribuye la edad en ambos datasets.
"""

# prompt: Imprimir el promedio y la distribución estándar de la edad en ambos datasets.

print("[train_data] \tPromedio de edad:\t\t", train_data['Age'].mean())
print("[train_data] \tDesviación estándar de edad:\t", train_data['Age'].std())
print("-"*70)
print("[test_data] \tPromedio de edad:\t\t", test_data['Age'].mean())
print("[test_data] \tDesviación estándar de edad:\t", test_data['Age'].std())

"""Vamos a hacer la suposición de que los pasajeros tenían la edad media entonces."""

train_data['Age'] = train_data['Age'].fillna(train_data['Age'].mean())
test_data['Age'] = test_data['Age'].fillna(test_data['Age'].mean())

"""Por otro lado, nos gustaría ver cuál fue el valor de `embarked` que más frecuencia tiene en `train_data`, y el `fare` promedio para `test_data`."""

print("[train_data] Frecuencias de embarked:")
print(train_data['Embarked'].value_counts())
print("-"*40)
print("[test_data] Fare promedio:")
print(test_data['Fare'].mean())

"""Según nuestra codificación, *Southampton* corresponde con el valor 0 y vamos a suponer que los pasajeros contienen el valor 0 en `Embarked`.

De manera similar, vamos a asignarle el fare promedio al pasajero que no lo tiene en `Fare`.
"""

train_data['Embarked'] = train_data['Embarked'].fillna(int(0))
train_data['Embarked'] = train_data['Embarked'].astype(int)
test_data['Fare'] = test_data['Fare'].fillna(test_data['Fare'].mean().round(2))

"""En el mapa de calor visto anteriormente, los atributos `SibSp` y `ParCh` están bastante relacionados, por lo que podemos crear una nueva variable, llamada `FamilyOnBoard` que sea binaria e indique si el pasajero tiene o no familiares a bordo."""

train_data['FamilyOnBoard'] = (train_data['SibSp'] + train_data['Parch']) > 0
train_data['FamilyOnBoard'] = train_data['FamilyOnBoard'].astype(int)
test_data['FamilyOnBoard'] = (test_data['SibSp'] + test_data['Parch']) > 0
test_data['FamilyOnBoard'] = test_data['FamilyOnBoard'].astype(int)

train_data = train_data.drop(['SibSp', 'Parch'], axis=1)
test_data = test_data.drop(['SibSp', 'Parch'], axis=1)

print(train_data.head())

"""Ahora, hacemos los cambios correspondientes para que `test_data` quede igual a `train_data`."""

test_data = test_data.drop(['Name', 'Ticket', 'Cabin'], axis=1)

test_data['Sex'] = test_data['Sex'].map({'male': 0, 'female': 1})
test_data['Embarked'] = test_data['Embarked'].map({'C': 2, 'Q': 1, 'S': 0})

print(test_data.head())

"""## Armando el Modelo

"""

X_train = train_data.drop("Survived", axis=1)
Y_train = train_data["Survived"]
X_test = test_data.drop("PassengerId", axis = 1)
print("shape of X_train",X_train.shape)
print("Shape of Y_train",Y_train.shape)
print("Shape of x_test",X_test.shape)
print("-"*80)
print(X_train.head())
print("-"*80)
print(Y_train.head())
print("-"*80)
print(X_test.head())

model = keras.Sequential([
    layers.Dense(64, activation='relu', input_shape=[7]),
    layers.Dense(32, activation='relu'),
    layers.Dense(1, activation='sigmoid')
])
model.summary()

model.compile(optimizer='adam',
              loss='binary_crossentropy',
              metrics=['accuracy'])

model.fit(X_train, Y_train, epochs=100)